// File: VampireGame.kt
import com.badlogic.gdx.ApplicationAdapter
import com.badlogic.gdx.Gdx
import com.badlogic.gdx.graphics.GL20
import com.badlogic.gdx.graphics.Texture
import com.badlogic.gdx.graphics.g2d.SpriteBatch
import com.badlogic.gdx.math.Rectangle
import com.badlogic.gdx.math.Vector2
import kotlin.random.Random

class VampireGame : ApplicationAdapter() {
    private lateinit var batch: SpriteBatch
    private lateinit var vampireTexture: Texture
    private lateinit var humanTexture: Texture
    
    private lateinit var vampire: GameObject
    private val humans = mutableListOf<GameObject>()
    
    private val screenWidth = 800f
    private val screenHeight = 600f
    
    override fun create() {
        batch = SpriteBatch()
        vampireTexture = Texture("vampire.png")
        humanTexture = Texture("human.png")
        
        vampire = GameObject(vampireTexture, Vector2(screenWidth / 2, screenHeight / 2), 100f)
        
        repeat(5) {
            humans.add(GameObject(humanTexture, Vector2(Random.nextFloat() * screenWidth, Random.nextFloat() * screenHeight), 80f))
        }
    }
    
    override fun render() {
        update()
        
        Gdx.gl.glClearColor(0f, 0f, 0f, 1f)
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT)
        
        batch.begin()
        vampire.draw(batch)
        humans.forEach { it.draw(batch) }
        batch.end()
    }
    
    private fun update() {
        vampire.update()
        humans.forEach { human ->
            human.update()
            if (human.isCollidingWith(vampire)) {
                humans.remove(human)
                vampire.speed += 10f
            } else {
                human.fleeFrom(vampire)
            }
        }
    }
    
    override fun dispose() {
        batch.dispose()
        vampireTexture.dispose()
        humanTexture.dispose()
    }
}

// File: GameObject.kt
import com.badlogic.gdx.Gdx
import com.badlogic.gdx.graphics.Texture
import com.badlogic.gdx.graphics.g2d.SpriteBatch
import com.badlogic.gdx.math.Rectangle
import com.badlogic.gdx.math.Vector2

class GameObject(
    private val texture: Texture,
    var position: Vector2,
    var speed: Float
) {
    private val bounds = Rectangle()
    
    fun update() {
        bounds.set(position.x, position.y, texture.width.toFloat(), texture.height.toFloat())
    }
    
    fun draw(batch: SpriteBatch) {
        batch.draw(texture, position.x, position.y)
    }
    
    fun isCollidingWith(other: GameObject): Boolean {
        return bounds.overlaps(other.bounds)
    }
    
    fun fleeFrom(other: GameObject) {
        val direction = Vector2(position).sub(other.position).nor()
        position.add(direction.scl(speed * Gdx.graphics.deltaTime))
    }
}

// File: Main.kt
import com.badlogic.gdx.backends.lwjgl.LwjglApplication
import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration

fun main() {
    val config = LwjglApplicationConfiguration().apply {
        title = "Vampire Chase"
        width = 800
        height = 600
    }
    LwjglApplication(VampireGame(), config)
}
